Generate a private key for the user: Use openssl to create a private key.
# openssl genrsa -out user1.key 2048

Generate a certificate signing request (CSR) for the user: Replace user1 and myorganization with the user's name and organization/group.
# openssl req -new -key user1.key -out user1.csr -subj "/CN=user1/O=myorganization"

Sign the CSR with your Kubernetes CA: Kubernetes cluster CA (Certificate Authority) signs the CSR to create the certificate. This step usually requires admin privileges. The command might vary based on your Kubernetes setup.
# openssl x509 -req -in user1.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user1.crt -days 500

Add the new userâ€™s credentials to kubectl: Use kubectl config commands to set up the context.
# kubectl config set-credentials user1 --client-certificate=/path/to/user1.crt --client-key=/path/to/user1.key
# kubectl config set-context user1-context --cluster=your-cluster-name --namespace=default --user=user1
