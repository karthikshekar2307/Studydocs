***** Define, build and modify container images
vi Dockerfile
FROM Ubuntu
RUN apt-get update
RUN apt-get install python
RUN pip install flask
RUN pip install flask-mysql
COPY . /opt/source-code
ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run

INSTRUCTION   arguements

# docker build Dockerfile -t iamskarthik23/my-custom-app
# docker push iamskarthik23/my-custom-app


***** Commands and Arguements in Docker

***** Commands and Arguements in Kubernetes
apiVersion: v1
kind: pod
metadata:
  name: ubuntu-sleeper-pod
spec:
  containers:
    - name: ubuntu-sleeper
      image: ubuntu-sleeper
      command: ["sleep2.0"]
      args: ["10"]

Command instruction is equal to Entrypoint instruction in docker.

*****A quick note on editing Pods and Deployments
Edit a POD
Remember, you CANNOT edit specifications of an existing POD other than the below.
spec.containers[*].image
spec.initContainers[*].image
spec.activeDeadlineSeconds
spec.tolerations


***** Environment Variables
env - is an array


***** Configmaps
ConfigMaps are used for configuration data that needs to be stored outside of code. They can store non-confidential data such as environment variables

(A) create Configmaps
(B) Inject to pod


***** Secrets
Encode Secrets
# echo -n 'mysql' | base64

Decode
# echo -n 'fdfgsdsa' | base64  --decode

we can pass secrets as single environment file or volumes

Note:
They are not encrypted but encoded.
  - Do not check in secret object to SCM along with code
Secrets are not encrypted in ETCD
- set up encryption at rest
Anyone able to create pod/deployments in same namespace can access the secrets
  - create RBAC
Consider third-party secret store providers


***** Encrypting secret data at rest
- Install etcd-client

- determine if encryption is already enabled
# ps -aux | grep kube-api

ls /etc/kuberentes/manidests
vi kube-apiserver.yaml
look for -ecryption-provider-config

To check status within etcd:
ETCDCTL_API=3 etcdctl \
   --cacert=/etc/kubernetes/pki/etcd/ca.crt   \
   --cert=/etc/kubernetes/pki/etcd/server.crt \
   --key=/etc/kubernetes/pki/etcd/server.key  \
   get /registry/secrets/default/<secretname> | hexdump -C


- To ensure all relevant data are encrypted
# kubectl get secrets --all-namespaces -o json | kubectl replace -f -


***** Pre-requisite - Security in Docker
run dcker using a non-root user

/usr/include/linux/capability.h


***** Security context
To include security context in kubernetes we do it via pod definition
-----
apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
  containers:
    - name: ubuntu
      image: ubuntu
      command: ["sleep", "3600"]
      securityContext:
        runAsUser: 1000
        capabilities:
          add: ["MAC_ADMIN"]

***** Resource requirements
---
apiVersion: v1
kind: Pod
metadata:
  name: simple-webapp-color
  labels:
    name: simple-webapp-color
spec:
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
      - containerPort: 8080
    resources:
      requests:
        memory: "4Gi"
        cpu: 
       limits:
         memory: "2Gi"
         cpu: 2

Behavior - cpu
No request/no limits
No requests/ limits (same as limits) requests = limits
requests/limits - can go up to limits but not beyond
requests/no limits - guaranteed requests , no limits

Behavior - memory
no request/no limits
no requests/ limits requests = limits
requests/limits - can go up to limits
requests/no limits - requests guaranteed and use as much as memory

set default limits = limit range ( Is set namespace level)
----
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-resource-constraint
spec:
  limits:
  - default:
      cpu: 500m
    defaultRequest:
       cpu: 500m
    max:
      cpu: "1"
    min:
      cpu: 100m
    type: Container

Resource quota - can be set at namespace level to hard limit the resource usage
vi resource-quota.yaml
---
apiVersion: v1
kind: resourcQuota
metadata:
  name: my-resource-quota
spec:
  hard:
    requests.cpu: 4
    requests.memory: 4Gi
    limits.cpu: 10
    limits.memory: 10Gi
----

***** Service accounts
creates a token automatically for external apps to authenticate

There is a default service account for all namespaces

kubernetes mounts default service account to all Pods

- Important changes in 1.22 and 1.24
location - /var/run/secrets/kubernetes.io/serviceaccount from default-token-j4hkv
- there is no expiry date set

1.22 - TokenRequestAPI 
- Audience bound
- time bound
- Object bound

1.24
- another enhancement to manually create token

To create service account oldway
vi secret-definition.yaml
----
apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: mysecretname

  annotations:
    kubernetes.io/service-account.name: dashboard-sa
-------


***** Taints and tolerations
- For what pods can be scheduled on a node
Taint on nodes
Toleratons on pods

scheduler tried to place PO, due to taint, its not scheduled
 if a pod is made tolerant it can be placed.

 # kubectl taint nodes node-name key=value:taint-effect

 Taint effect : what will happen to pod if they do not tolerate the taint.
 - NoSchedule - evict the pod
 - PreferNoSchedule - try to avoid eviction but if needed then evict
 - NoExecute - new pods will not be schedules, existing pod not tolerating will be evicted

 # kubectl taint nodes node1 app=blue:NpSchedule

 ----
 Vi pod-definition.yaml (all the values needs to be in double quotes)
 apiVersion: 
 kind: Pod
 metadata:
   name: myapp-pod
spec:
  containers:
  - name: nginx-container
    image: nginx
   tolerations:
   - key: "app"
     operator: "Equals"
     value: "blue"
     effect: "NoSchedule"
----

# kubectl describe node kubemaster | grep -i taint


***** Node Selectors logging
to limit pod to run on larger node
-----
apiVersion: 
 kind: Pod
 metadata:
   name: myapp-pod
spec:
  containers:
  - name: nginx-container
    image: nginx
   nodeSelector:
     size: Large

to label the node
# kubectl label nodes node-name label-key=label-value
# kubectl label nodes node-1 size=large
-----
Limitations:
- what if erquirement is complex
large or medium
place on node not small


***** Node Affinity
In affinity rules are more flexible than node selectors. They can target a specific version of Kubernetes running on a node.
----
apiVersion: 
 kind: Pod
 metadata:
   name: myapp-pod
spec:
  containers:
  - name: nginx-container
    image: nginx
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: size
            operator: NotIn
            values:
            - small

Node Affinity types
requiredDuringSchedulingIgnoredDuringExecution
preferredDuringSchedulingIgnoredDuringExecution

during scheduling - when pods are first created
during execution - while pods are already running

planned
requiredDuringSchedulingRequiredDuringExecution

***** Taints and Tolerations vs Node Affinity
