# This Root stack includes AutoScaling, LoadBalaner and Security group resources defined.

AWSTemplateFormatVersion: 2010-09-09
Description: Web Server Root stack

#=============================================================================================

Parameters:

# Allows to choose Instance type required for provisioning Web Server
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small

# Allows users to choose their SSH Key-Pair
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

# Parameterizing Source/CIDR to allow SSH
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

# Reference Latest Amazon Linux AMI to be used by WebServer
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

# Nested VPC Stack details
  # VPC Parameters
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR Range

# Public Subnet
  PublicSubnetBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: Public SN CIDR

# Private Subnet 01
  PrivateSubnetBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: First Private Subnet

# Private Subnet 02
  PrivateSubnetBlock2:
    Type: String
    Default: 10.0.3.0/24
    Description: Second Private Subnet

#=============================================================================================

Resources:

# Resource definition for WebServer VPC Stack
  WebServerVPC:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: https://testbuck2307.s3.ap-southeast-2.amazonaws.com/Nested-Stack-VPC.yaml
      Parameters:
        VpcBlock: !Ref VpcBlock
        PublicSubnetBlock: !Ref PublicSubnetBlock
        PrivateSubnetBlock: !Ref PrivateSubnetBlock
        PrivateSubnetBlock2: !Ref PrivateSubnetBlock2

  InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access and HTTP from the load balancer only
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupOwnerId: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.GroupName

# Resource definition for WebServer AutoScaling Group
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !GetAtt WebServerVPC.Outputs.WebserverPrivateSubnet
        - !GetAtt WebServerVPC.Outputs.WebserverPrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames: 
        - !Ref ElasticLoadBalancer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

# Resource Definition for WebServer ASG LaunchConfiguration
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          setup:
            - install_server
        install_server:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                Hello world!
              mode: 000644
              owner: root
              group: root
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=7
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              Content: !Sub |
                [cfn-auto-reloader-hook]
                trigger=post.update
                path=Resources.MyVMInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resources LaunchConfig --region ${AWS::Region}
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SecurityGroups: 
        - !GetAtt SecurityGroup.Outputs.WebServerSecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --configsets setup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}

# Resource Definition for Load Balancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: 
        - !GetAtt WebServerVPC.Outputs.WebserverPrivateSubnet
        - !GetAtt WebServerVPC.Outputs.WebserverPrivateSubnet2
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'     
      SecurityGroups:
        - !GetAtt SecurityGroup.Outputs.LoadBalancerGroup   


# Resource Definition for WebServer Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupOwnerId: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.OwnerAlias
        SourceSecurityGroupName: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.GroupName
      

######End Of Template########