***** High availability and scalability
- Vertical scaling: Increase instance size 
From:t2.nano to 12tb I.metal

- Horizontal scaling: Increase number of instacnes
Autoscaling group
Load balancer

- High availability: Run instances for the same application across multi AZ
Autoscaling group multiAZ
Load balancer multiAZ

***** Elastic Load balancer
- Why use a load balancer
Spread load across multiple downstream instances
expose a single point of access (DNS) to your application
seamlessly handle failures of downstream instances
do regular health checks to your instances
Provide SSL termination (HTTPS) for your websites
Enforce stickiness with cookies
High availability across zones
Seperate public traffic from private traffic

- Health checks

- Types of load balancer on AWS
Classic load balancer
Application load balancer
Network load balancer
Gateway load balancer 


***** Application load balancer
- Application load balancer is Layer 7 (HTTP)
- Load balancing to multiple HTTP applications across machines (target groups)
- Load balancing to multiple applications on same machine (ex: Containers)
- Support for HTTP/2 and websocket
- Support redirects (from HTTP to HTTPS for example)
- Routing table  to differnt target froups
Path
hostname
querystring/headers
- Great for docker/ECS
- Has a port mapping feature to redirect to a dynamic port in ECS
- In comparison, we'd need multiple classic load balancer per application

- Application load balancer - Target groups
EC2 instances (can be managed by an AutoScaling group) - HTTP
ECS tasks (Managed by ECS itself)
Lambda functions - HTTP request is translated into a JSON event
IP addresses - must be private IPs
ALB can roue to multiple target groups

ALB-Good to know
- Fixed hostname (xxx.region.elb.amazonaws.com)
- The application servers dont see the IP of the client directly
the true IP of the client is inserted in the header X-Forwarded-for
We can also get Port (X-Forwarded-Port) and proto (X-Forwarded-Proto)


***** Network load balancer
- Network load balancers (Layer 4) allow to:
Forward TCP and UDP traffic to your instances
Handle millions of request 

er seconds
less latency ~100ms (vs 400ms for ALB)

- NLB has one static IP per AZ, and supports assigning Elastic IP (helpful for whitelisting specific IP)

- NLB are used for extreme performance, TCP or UDP traffic

Backend/Target groups
- EC2 instances
- IP addresses - must be private IPs
- Application load balancer
- Health checks support the TCP, HTTP and HTTPS protocols


***** Gateway load balancer
- Deploy, scale and manage a fleet of 3rd party network avirtual appliances in AWS
example: firewall intrusion detection and prevention systems, deep packet inspection systems, payload
manipulation

- Operates at layer 3 (network Layer) - IP packets

- Combines the following functions:
Transperant network gateway - single entry/exit for all traffic
Load balancer - distributes traffic to your virtual appliances

- Uses the GENEVE protocol on port 6081

Target groups
- EC2 instances
- IP addresses

***** Sticky sessions (session affinity)
- It is possible to implement stickiness so that the same client is always redirected to the same
instance behind a load balancer

- This works for classic load balancer, application load balancer and network load balancer

- The cookie used for stickiness has an expiration date you control

- Use case: make sure the user doesn't lose his sesson data

- Enabling stickiness may bring imbalance to the load over the backend ec2 instances.

Cookie names:
(A) Application-bsed cookies

Custom cookie:
Generated by the target
can include any custom attributes required by the application
cookie name must be specidfied individually for each target group
Don't use AWSALB, AWSALBAPP or AWSALBTG (reserved for use by the ELB)

Application cookie:
Generated by the load balancer
cookie name is AWSALBAPP

(B) Duration-based cookies
cookie generated by the load balancer
cookie name is AWSALB for ALB, AWSELB for CLB


***** Elastic Load balancer - Cross Zone load balancing
With Cross zone load balancing: Each load balancer instance distributes evenly across all 
registered instances in all AZ.

When we do not have cross-zone load balancer - traffic is contained in each AZ

- Application load balancer
Enabled byd default (can be disabled at target group level)
No charges for inter AZ data

- Network load balancer
Disabled by default
You pay charges for inter AZ data if Enabled

- Classic load balancer
Disabled by default
No charges for inter AZ data if Enabled


***** ELB - SSL certificates
SSL/TLS - basics
- An SSL certificate allows traffic between your clients and your load balancer to be encrypted in transit
(in-flight encryption)
- SSL refers to secure socket layer, used to encrypt connections
- TLS refers to transport layer security, which is a newer version
- Nowadays, TLS certificates are mainly used, but people still refer as SSL
- Public SSL certificates are issued by certificate authorities (CA)
- SSL certificates have an expiration date (you set) and must be renewed
- The load balancer uses an X.509 certificates (SSL/TLS server cerificate)
- You can manage certificates using ACM (AWS Certificate manager)
- You can create upload your own certificates alternatively
- HTTP listener:
You must specify a default certificate
you can add an optional list of certs to support multiple domains
clients can use SNI (server name indication) to specify the hostname they reach
Ability to specify a security policy to support older versions of SSL/TLS (legacy clients)

SSL - Server name indication
- SNI solves the problem of loading multiple SSL certificates onto one web server (to serve multiple websites)
- Its a "newer" protocol, and requrired the client to indicate the hostname of the target server in the 
initial SSL handshake
- The server will then find the correct certificate, or return the default one

Note: 
Only works for ALB and NLB (newer generation), cloudfront
Does not work for CLB (older gen)


***** ELB - Connection draining
- Feature naming
Connection draining - for CLB
Deregistration delay - for ALB and NLB

- Time to complete "in-flight requests" while the instance is de-registering or unhealthy
- Stops sending new requests to the ECC2 instance which is de-registering
- Between 1 to 3600 seconds (default: 300 seconds)
- Can be disabled (set value to 0)
- Set to a low value if your requests are short


***** AutoScaling groups (ASG)

***** AutoScaling groups - Scaling policies
1. Target tracking scaling
Most simple and easy to set-up
example: I want the average ASG CPU to stay at around 40%

2. Simple/Step Scaling
When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units
When a CloudWatch alarm is triggerd (example CPU < 30%), then remove

3. Scheduled applications
Anticipate a scaling based on known usage paterns
Example: Increase the mon capacity to 10 at 5 pm on Fridays

4. Predictive scaling: Continuously forecast load and schedule scaling ahead


Good metrics to scale on
- CPU utilization: Average CPU
- RequestCountPerTarget
- Average Network
- Any custom metrics

After a scaling activtiy happens, you are in the cooldown period (default 300 seconds)

During the cooldown period, the ASG will not launch or terminate additional instances (to allow metrics to stailize)

