***** Serverless in AWS
- AWS Lambda
- DynamoDB
- AWS cognito
- AWS API Gateway
- Amazon s3
- SNS and SQS
- kinesis data firehose
- Aurora Serverless
- Step functions
- Fargate


***** Lambda Overview
Virtual functions - no servers to manage
short executions
run on-demand
scaling is automated


***** AWS Lambda language support
- Node.js (JavaScript)
- Python
- Java (Java 8 compatible)
- C# (.Net core)
- Golang
- C# / Powershell
- Ruby
- Custom Runtime API
- Lambda container image

Lambda integrations
API Gateway
kinesis
DynamoDB
s3
CloudFront
Cloudwatch event bridge 
CW lofs
SNS SQS
Congnito


***** Lambda limits
- Execution - 128MB - 10G
- maximum execution - 15 mins.
- Environemnt variables
- Disk capacity isin the /tmo - 512MB to 10G
- Concurrency executions: 1000 (can be increased)

Deployment:
Lambda function deployment size (compressed .zip): 50 128MB
Size of uncompressed deployment (code + dependencies)
can use the /tmp directory to load other files at startup
Size of environment variables

***** lambda Snapstart
- Improves your lambda functions performance up to 10x at no extra cost for Java 11 and above
- When enabled, function is invoked from a pre-initialized state (no function initializartion from scratch)
- When you publish a new version:
Lambda initializes your function
Takes a snapshot of memory and disk state of the initiazed function
snapshot is cached for low latency access


***** Lambda Edge and cloudfront functions
- Many modern applications execute some form of the logic at the Edge
- Edge function:
A code that you write and attach to CloudFront distributuons
Runs close to your users to minimize latency
- Cloudfront provides two types: CloidFront functions and lambda@Edge
- You dont have to manage any servers, deployed globally
use case: customize the CDN content

CloudFront functions
- Lightweight functions written in JavaScript
- For high-scale, latency-sensitive CDN customizations
- Sub-ms startup times, millions of requests/second
- USed to change viewer requests and responses:
Viewer request: After cloudfront receives a request from a viewer
Viewer response: before cloudfront forwards the response to the viewer
- Native feature of Cloudfront (manage code entirely within CloudFront)

Lambda@Edge
- Lambda functions wtritten in NodeJS or Python
- Scales to 1000s of request/second
- Used to change CloudFront requests and responses:
Viewer request - After cloudfront receives a request from a viewer
Origin request - before Cloudfront forwards the request to the Origin
Origin response - after cloudfront receives the response from the Origin
Viewer response - before cloudfront forwards the response to the viewer
- Author your functions in one AWS region (us-east-1), then cloudfront replicates to its locations

***** Lambda in VPC
- Launched out of VPC
- DEfine VPC 

Lambda with RDS proxy
- If lambda functions directly access your database, they may open too many connections under high load
- RDS proxy
Improve scalability by pooling and sharing DB connections
Imporove availability by reducing by 66% the failover time and preserving connections
Improve security by enforcing IAM authentication and storing credentials in secret manager


****** RDS - Invoking lambda and event notifications
- Invoke lambda functions from within your DB instance
- Allows you to process data events from within a database
- Supported for RDS for postgreSQL and aurora MySQL
- Must allow outbound traffic to your lambda function from within your DB instance (public, NAT GW, VPC endpoints)
- DB instance must have the required permissions to invoke the lambda function (lambda resource based policy and IAM policy)

RDS event notifications

***** DynamoDB
Standard and Infrequest access classes

- DynamoDB is made of tables
- each table has a promary keyy (must be decided at creation time)
- each table can have an infinite number of items (=rows)
- Each item has attributes (can be added over time - can be null)
- Maximum size of an item is 400KB
- Data types supported are:
scalar types - string, number, binary, boolean, null
docment types - list, map
set types - string set, number set, binary set

Read/write capacity modes
provisioned mode
On-demand mode


**** Dynamodb accelerator
- Fully managed, highly available, seamless in-memory cache for DynamoDB
- Help solve read congestion by caching
- Microseconds latency for cached data
- Doesn't require application logic modification (compatible with existing DynamoDB APIs)
- 5 minutes TTL for cache (default)

Stram Processing

Global processing
- 

TTL - delete items after expory

 - Use for disaster recovery
 Continuous backups
 on-demand backups

Integration wit Amazon s3
- export to S3



***** API Gateway
- AWS Lambda + API gateway: No infrastructure to manage
- Support for the websocker protocol
- Handle API versioning (v1, v2...)
- Handle different environments (dev, test, prod)
- Handle security (authentication and authorization)
- Create API keys, handle request throttling
- swagger/Open API import to quickly define APIs
- Transform and validate requests and responses
- Generate SDK and API specifications
- Cache API responses

Integration
- invoke lambda
- HTTP
expose HTTP endpoints, ALBs
- Any AWS service

Endpoint types
- Edge-optimized
- Regional: 
for clients in same region
- Private

API gateway - security
-User authentication through
IAM Roles (useful for internal applications)
cognito
custom authorizer

- Custom domain name HTTPS security through integration with AWS certificate manager (ACM)


**** AWS Step functions
- Build serverles visual workflow to orchestrate your lambda functions

- Features:
Sequnce
Parallel
conditions
timeouts
error handling

- can integrate with EC2, ECS, on-premises servers, API gateway, SQS queues, etc.

- Possibility of implementing human approval feature

Use cases:
Order fulfillment
data processing
web applications
any workflow


**** Amazon Cognito
- Give users an identity to interact with our web or mobile application

- Cognito user pools:
Sign in functionality for app users
Integrate with API gateway and application load balancer

- Cognito identity pools (federated identity)
Provide AWS credentials to users so thay can access AWS resources directly
Integrate with Cognito User pools as an identity provider

- Cognito vs IAM: "hundreds of users", mobile users, authentication with SAML





